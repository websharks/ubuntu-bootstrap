#!/usr/bin/env bash

# ----------------------------------------------------------------------------------------------------------------------

# Default config. values.

CFG_HOST="$(hostname --fqdn)";
CFG_ROOT_HOST="$(hostname --domain)";
[[ "$(dot-count "${CFG_ROOT_HOST}")" -lt 1 ]] && CFG_ROOT_HOST="${CFG_HOST}";
CFG_OTHER_HOSTS=''; # Note that Docker will wipe out `/etc/hosts`.

CFG_SLUG="$(hostname --short)";
CFG_VAR="${CFG_SLUG//-/_}";

CFG_ADMIN_USERNAME=''; is-vm && CFG_ADMIN_USERNAME='admin';
CFG_ADMIN_PASSWORD=''; is-vm && CFG_ADMIN_PASSWORD='%%CFG_ADMIN_USERNAME%%';
CFG_ADMIN_NAME=''; is-vm && CFG_ADMIN_NAME='%%CFG_ADMIN_USERNAME%%';
CFG_ADMIN_EMAIL='%%CFG_ADMIN_USERNAME%%@wsharks.com'; is-vm && CFG_ADMIN_EMAIL='%%CFG_ADMIN_USERNAME%%@%%CFG_ROOT_HOST%%';
CFG_ADMIN_PUBLIC_EMAIL='%%CFG_SLUG%%@wsharks.com'; is-vm && CFG_ADMIN_PUBLIC_EMAIL='%%CFG_SLUG%%@%%CFG_ROOT_HOST%%';
CFG_ADMIN_PREFERRED_SHELL='/bin/zsh';

CFG_ADMIN_AUTHORIZED_SSH_KEYS='/bootstrap/src/ssh/%%CFG_ADMIN_USERNAME%%/authorized_keys';
! is-vm && [[ -f /root/.ssh/authorized_keys ]] && CFG_ADMIN_AUTHORIZED_SSH_KEYS='/root/.ssh/authorized_keys';

CFG_TOOLS_USERNAME='%%CFG_ADMIN_USERNAME%%';
CFG_TOOLS_PASSWORD='%%CFG_ADMIN_PASSWORD%%';
CFG_TOOLS_PMA_BLOWFISH_KEY="$(keygen 64)";
CFG_MAINTENANCE_BYPASS_KEY="$(keygen 64)";

CFG_MYSQL_DB_HOST='127.0.0.1';
CFG_MYSQL_DB_PORT='3306';
CFG_MYSQL_SSL_ENABLE='1';
CFG_MYSQL_DB_CHARSET='utf8mb4';
CFG_MYSQL_DB_COLLATE='utf8mb4_unicode_ci';
CFG_MYSQL_DB_NAME='db0';
CFG_MYSQL_DB_USERNAME='client'; is-vm && CFG_MYSQL_DB_USERNAME='%%CFG_ADMIN_USERNAME%%';
CFG_MYSQL_DB_PASSWORD="$(keygen 32)"; is-vm && CFG_MYSQL_DB_PASSWORD='%%CFG_ADMIN_PASSWORD%%';

CFG_INSTALL_SWAP='1'; in-docker && CFG_INSTALL_SWAP='0';

CFG_INSTALL_WS_CA_FILES='1'; is-vm && CFG_INSTALL_WS_CA_FILES='0';

CFG_INSTALL_DOCKER='0'; is-vm && ! in-docker && CFG_INSTALL_DOCKER='1';

CFG_INSTALL_POSTFIX='1';

CFG_INSTALL_MAILCATCHER='0';

CFG_INSTALL_NGINX='1'; is-4ci && CFG_INSTALL_NGINX='0';
CFG_INSTALL_APACHE='0'; is-4ci && CFG_INSTALL_APACHE='1';

CFG_INSTALL_MYSQL='1';
CFG_INSTALL_MYSQL_DB_IMPORT_FILE='';

CFG_INSTALL_MEMCACHE='1';
CFG_INSTALL_RAMDISK='1'; in-docker && CFG_INSTALL_RAMDISK='0';

CFG_INSTALL_PHP_CLI='1';
CFG_INSTALL_PHP_FPM='1';
CFG_INSTALL_PHP_VERSION='custom';
# `custom` or `custom-src` (i.e., from source).
# Or, via Ondřej Surý's PPA: `7.0`, `5.6`, `5.5`.

CFG_INSTALL_PHPCS='1';
CFG_INSTALL_PHING='1';
CFG_INSTALL_PHPUNIT='1';
CFG_INSTALL_APIGEN='1';
CFG_INSTALL_CASPERJS='1';
CFG_INSTALL_COMPOSER='1';
CFG_INSTALL_WP_CLI='1';
CFG_INSTALL_WP_I18N_TOOLS='1';

CFG_INSTALL_APP_REPO='1';

CFG_INSTALL_DISCOURSE='0';
CFG_DISCOURSE_SMTP_HOST='email-smtp.us-east-1.amazonaws.com';
CFG_DISCOURSE_SMTP_PORT='587';
CFG_DISCOURSE_SMTP_AUTH_TYPE='login';
CFG_DISCOURSE_SMTP_USERNAME='';
CFG_DISCOURSE_SMTP_PASSWORD='';

CFG_INSTALL_WORDPRESS='1'; ( is-4ci || is-4pkg ) && CFG_INSTALL_WORDPRESS='0';
CFG_INSTALL_WORDPRESS_VM_SYMLINKS='0'; is-vagrant && ! is-4pkg && CFG_INSTALL_WORDPRESS_VM_SYMLINKS='1';

CFG_INSTALL_FIREWALL='1'; in-docker && CFG_INSTALL_FIREWALL='0';
CFG_INSTALL_FAIL2BAN='1'; in-docker && CFG_INSTALL_FAIL2BAN='0';

CFG_FIREWALL_ALLOWS_MYSQL_INSIDE_VPN='0'; is-vm && CFG_FIREWALL_ALLOWS_MYSQL_INSIDE_VPN='1';
CFG_FIREWALL_ALLOWS_CF_ONLY_VIA_80_443='1'; is-vm && CFG_FIREWALL_ALLOWS_CF_ONLY_VIA_80_443='0';

CFG_INSTALL_UNATTENDED_UPGRADES='1';

CFG_CONFIG_FILE='/app/.config.json';

CFG_USE_WIZARD='1'; [[ ! -t 1 ]] && CFG_USE_WIZARD='0';

# ----------------------------------------------------------------------------------------------------------------------

# Apply any CLI arguments to config values.

for _cfg_key in "${cfgs[@]}"; do
  _a_cfg_key=A_"${_cfg_key}";
  _a_cfg_val="${!_a_cfg_key:-}";

  if [[ -n "${_a_cfg_val}" ]]; then
    export "${_cfg_key}"="${_a_cfg_val}";
  fi;
done; unset _cfg_key; unset _a_cfg_key; unset _a_cfg_val;

# ----------------------------------------------------------------------------------------------------------------------

# Need dialog utility?

if [[ "${CFG_USE_WIZARD}" == 1 ]]; then
  apt-get install dialog --yes --force-yes;
  export DIALOGRC=/bootstrap/src/tpl.home/.dialogrc;
fi;
# ----------------------------------------------------------------------------------------------------------------------

# Fills replacement codes.

function fill-cfg-rcs() {
  local _cfg_key;
  local _cfg_rc_key;

  for _cfg_key in "${cfgs[@]}"; do
    if [[ -z "${1:-}" || "${_cfg_key}" == "${1}" ]]; then
      for _cfg_rc_key in "${cfgs[@]}"; do
        export "${_cfg_key}"="${!_cfg_key//%%${_cfg_rc_key}%%/${!_cfg_rc_key}}";
      done;
    fi;
  done;
};

# ----------------------------------------------------------------------------------------------------------------------

# Fill, clean, sanitize.

function fill-clean-sanitize-cfgs() {
  local _cfg_key;

  fill-cfg-rcs; # All!

  for _cfg_key in "${cfgs[@]}"; do
    export "${_cfg_key}"="$(trim "${!_cfg_key}")";
  done;

  CFG_HOST="${CFG_HOST,,}";
  CFG_ROOT_HOST="${CFG_ROOT_HOST,,}";
  CFG_OTHER_HOSTS="${CFG_OTHER_HOSTS,,}";
  CFG_OTHER_HOSTS="$(echo "${CFG_OTHER_HOSTS}" | tr ',' ' ')";
  CFG_SLUG="${CFG_SLUG,,}";
  CFG_VAR="${CFG_VAR,,}";

  CFG_ADMIN_USERNAME="${CFG_ADMIN_USERNAME,,}";
  CFG_ADMIN_EMAIL="${CFG_ADMIN_EMAIL,,}";
  CFG_ADMIN_PUBLIC_EMAIL="${CFG_ADMIN_PUBLIC_EMAIL,,}";

  CFG_TOOLS_USERNAME="${CFG_TOOLS_USERNAME,,}";

  CFG_MYSQL_DB_HOST="${CFG_MYSQL_DB_HOST,,}";
  CFG_MYSQL_DB_CHARSET="${CFG_MYSQL_DB_CHARSET,,}";
  CFG_MYSQL_DB_COLLATE="${CFG_MYSQL_DB_COLLATE,,}";
  CFG_MYSQL_DB_NAME="${CFG_MYSQL_DB_NAME,,}";
  CFG_MYSQL_DB_USERNAME="${CFG_MYSQL_DB_USERNAME,,}";

  CFG_DISCOURSE_SMTP_HOST="${CFG_DISCOURSE_SMTP_HOST,,}";
  CFG_DISCOURSE_SMTP_AUTH_TYPE="${CFG_DISCOURSE_SMTP_AUTH_TYPE,,}";
};

# ----------------------------------------------------------------------------------------------------------------------

# Validate configuration variables.

function validate-cfgs() {
  local _cfg_key;
  local cfg_key_empty='';
  local cfg_warning='';

  ## Check emptys.

  for _cfg_key in \
    'CFG_HOST' \
    'CFG_ROOT_HOST' \
    'CFG_SLUG' \
    'CFG_VAR' \
    \
    'CFG_ADMIN_USERNAME' \
    'CFG_ADMIN_PASSWORD' \
    'CFG_ADMIN_NAME' \
    'CFG_ADMIN_EMAIL' \
    'CFG_ADMIN_PUBLIC_EMAIL' \
    \
    'CFG_TOOLS_USERNAME' \
    'CFG_TOOLS_PASSWORD' \
    'CFG_TOOLS_PMA_BLOWFISH_KEY' \
    \
    'CFG_MAINTENANCE_BYPASS_KEY' \
    ; do # None of these can be empty.

      if [[ -z "${!_cfg_key}" ]]; then
        cfg_key_empty="${_cfg_key}";
        break; # Stop here.
      fi;
  done;

  if [[ "${CFG_INSTALL_MYSQL}" == 1 ]]; then
    for _cfg_key in \
      'CFG_MYSQL_DB_HOST' \
      'CFG_MYSQL_DB_PORT' \
      'CFG_MYSQL_DB_CHARSET' \
      'CFG_MYSQL_DB_COLLATE' \
      'CFG_MYSQL_DB_NAME' \
      'CFG_MYSQL_DB_USERNAME' \
      'CFG_MYSQL_DB_PASSWORD' \
      ; do # None of these can be empty.

        if [[ -z "${!_cfg_key}" ]]; then
          cfg_key_empty="${_cfg_key}";
          break; # Stop here.
        fi;
    done;
  fi;

  if [[ "${CFG_INSTALL_DISCOURSE}" == 1 ]]; then
    for _cfg_key in \
      'CFG_DISCOURSE_SMTP_HOST' \
      'CFG_DISCOURSE_SMTP_PORT' \
      'CFG_DISCOURSE_SMTP_AUTH_TYPE' \
      'CFG_DISCOURSE_SMTP_USERNAME' \
      'CFG_DISCOURSE_SMTP_PASSWORD' \
      ; do # None of these can be empty.

        if [[ -z "${!_cfg_key}" ]]; then
          cfg_key_empty="${_cfg_key}";
          break; # Stop here.
        fi;
    done;
  fi;

  ## Validation; any problems?

  if [[ -n "${cfg_key_empty}" ]]; then

    cfg_warning='-- Config Errors Exist -------------------------------------------------------------'$'\n';
    cfg_warning+='The following configuration key is empty: `'"${cfg_key_empty}"'`'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ "${CFG_INSTALL_WS_CA_FILES}" == 1 ]] && is-vm; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='The WebSharks SSL CA files require a production server.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ "${CFG_INSTALL_NGINX}" == 1 && "${CFG_INSTALL_APACHE}" == 1 ]]; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='Please choose Nginx or Apache (not both). These run on the same ports.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ ( "${CFG_INSTALL_NGINX}" == 1 || "${CFG_INSTALL_APACHE}" == 1 ) && "${CFG_INSTALL_PHP_FPM}" != 1 ]]; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='If you install Nginx or Apache you must also install PHP-FPM.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ "${CFG_INSTALL_APP_REPO}" == 1 && "${CFG_INSTALL_PHING}" != 1 ]]; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='If you install an app repo you must also install Phing.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ "${CFG_INSTALL_PHING}" == 1 && ( "${CFG_INSTALL_PHPCS}" != 1 || "${CFG_INSTALL_PHPUNIT}" != 1 \
    || "${CFG_INSTALL_CASPERJS}" != 1 || "${CFG_INSTALL_COMPOSER}" != 1 ) ]]; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='Phing requires PHPCS, PHPUnit, CasperJS, and Composer.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ "${CFG_INSTALL_DISCOURSE}" == 1 && "${CFG_INSTALL_DOCKER}" != 1 ]]; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='If you install Discourse you must also install Docker.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ "${CFG_INSTALL_DISCOURSE}" == 1 && ( "${CFG_INSTALL_NGINX}" == 1 || "${CFG_INSTALL_APACHE}" == 1 \
    || "${CFG_INSTALL_MYSQL}" == 1 || "${CFG_INSTALL_PHP_FPM}" == 1 || "${CFG_INSTALL_MEMCACHE}" == 1 \
    || "${CFG_INSTALL_APP_REPO}" == 1 || "${CFG_INSTALL_WORDPRESS}" == 1 ) ]]; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='If you install Discourse, services like Nginx, Apache, MySQL, PHP-FPM, and WordPress';
    cfg_warning+=' should be excluded. Discourse is almost entirely self-contained—via Docker.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ "${CFG_INSTALL_WORDPRESS_VM_SYMLINKS}" == 1 ]] && ! is-vm; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='The installation of VM symlinks applies only when running a VM.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif [[ "${CFG_FIREWALL_ALLOWS_CF_ONLY_VIA_80_443}" == 1 ]] && is-vm; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='CloudFlare integration is not possible when running on a VM.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  elif in-docker && [[ "${CFG_INSTALL_DOCKER}" == 1 \
    || "${CFG_INSTALL_SWAP}" == 1 || "${CFG_INSTALL_RAMDISK}" == 1 \
    || "${CFG_INSTALL_FIREWALL}" == 1 || "${CFG_INSTALL_FAIL2BAN}" == 1 ]]; then

    cfg_warning='-- Installation Conflict -----------------------------------------------------------'$'\n';
    cfg_warning+='Inside Docker, please exclude: Docker, Swap, RAM Disk, Firewall, and Fail2Ban.'$'\n';
    cfg_warning+='-----------------------------------------------------------------------------------'$'\n';

  fi; # End conflicts/validation.

  ## Should we fail here? i.e., does a warning exist?

  if [[ -n "${cfg_warning}" ]]; then

    if [[ "${CFG_USE_WIZARD}" != 1 ]]; then
      echo "${cfg_warning}"; exit 1;
    else # Simply return a false response in this case.
      cfg_warning+='Press any key to start again w/ your existing options...'$'\n';
      read -n1 -rsp "${cfg_warning}"; return 1;
    fi; # End conditional error handling.

  fi; # End validation and warning presentation.

  return 0; # No problems.
};

# ----------------------------------------------------------------------------------------------------------------------

# Configuration wizard via `dialog` utility.

function cfgs-wizard() {
  local cfgs_confirmed='0';
  local _cfg_key _i _cfg_value;
  local _cfg_package_options _cfg_package_option;
  local _cfg_response; # All used below.

  if [[ "${CFG_USE_WIZARD}" != 1 ]]; then

    # Fill, clean, sanitize.
    fill-clean-sanitize-cfgs;

    # Validate config values now.
    validate-cfgs; # Failure results in exit w/ error.

  else # Begin wizard loop & continue until we get confirmation.

    while [[ "${cfgs_confirmed}" != 1 ]]; do

      ## Ask for required config values.

      for _cfg_key in \
        'CFG_ADMIN_USERNAME' \
        'CFG_ADMIN_PASSWORD' \
        'CFG_ADMIN_NAME' \
        'CFG_ADMIN_EMAIL' \
        'CFG_ADMIN_PUBLIC_EMAIL' \
        ; do _i=0; # Ask at least once.

          fill-cfg-rcs "${_cfg_key}"; # Fill replacement codes.

          while [[ "${_i}" -lt 1 ]] || [[ -z "${!_cfg_key}" ]]; do _i=$((_i+1));

            _cfg_value="$(dialog \
              --backtitle 'Configuration' \
              --title 'Required Details' \
              --no-cancel \
              --inputbox "${_cfg_key}" 8 75 "${!_cfg_key}" \
              3>&1 1>&2 2>&3)";

            export "${_cfg_key}"="${_cfg_value}";

          done;
      done;

      ## Ask for package installation options.

      _cfg_package_options="$(dialog \
        --backtitle 'Configuration' \
        --title 'Installation Package Options' \
        --no-cancel \
        \
        --separate-output --checklist 'Use space bar to toggle these.' 25 75 25 \
        \
        'CFG_INSTALL_SWAP' 'Install?' "$([[ "${CFG_INSTALL_SWAP}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_WS_CA_FILES' 'Install?' "$([[ "${CFG_INSTALL_WS_CA_FILES}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_DOCKER' 'Install?' "$([[ "${CFG_INSTALL_DOCKER}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_POSTFIX' 'Install?' "$([[ "${CFG_INSTALL_POSTFIX}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_MAILCATCHER' 'Install?' "$([[ "${CFG_INSTALL_MAILCATCHER}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_NGINX' 'Install?' "$([[ "${CFG_INSTALL_NGINX}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_APACHE' 'Install?' "$([[ "${CFG_INSTALL_APACHE}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_MYSQL' 'Install?' "$([[ "${CFG_INSTALL_MYSQL}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_MEMCACHE' 'Install?' "$([[ "${CFG_INSTALL_MEMCACHE}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_RAMDISK' 'Install?' "$([[ "${CFG_INSTALL_RAMDISK}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_PHP_CLI' 'Install?' "$([[ "${CFG_INSTALL_PHP_CLI}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_PHP_FPM' 'Install?' "$([[ "${CFG_INSTALL_PHP_FPM}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_PHPCS' 'Install?' "$([[ "${CFG_INSTALL_PHPCS}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_PHING' 'Install?' "$([[ "${CFG_INSTALL_PHING}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_PHPUNIT' 'Install?' "$([[ "${CFG_INSTALL_PHPUNIT}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_APIGEN' 'Install?' "$([[ "${CFG_INSTALL_APIGEN}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_CASPERJS' 'Install?' "$([[ "${CFG_INSTALL_CASPERJS}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_COMPOSER' 'Install?' "$([[ "${CFG_INSTALL_COMPOSER}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_WP_CLI' 'Install?' "$([[ "${CFG_INSTALL_WP_CLI}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_WP_I18N_TOOLS' 'Install?' "$([[ "${CFG_INSTALL_WP_I18N_TOOLS}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_APP_REPO' 'Install?' "$([[ "${CFG_INSTALL_APP_REPO}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_DISCOURSE' 'Install?' "$([[ "${CFG_INSTALL_DISCOURSE}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_WORDPRESS' 'Install?' "$([[ "${CFG_INSTALL_WORDPRESS}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_WORDPRESS_VM_SYMLINKS' 'Install?' "$([[ "${CFG_INSTALL_WORDPRESS_VM_SYMLINKS}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_FIREWALL' 'Install?' "$([[ "${CFG_INSTALL_FIREWALL}" == 1 ]] && echo 'on' || echo 'off')" \
        'CFG_INSTALL_FAIL2BAN' 'Install?' "$([[ "${CFG_INSTALL_FAIL2BAN}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        'CFG_INSTALL_UNATTENDED_UPGRADES' 'Install?' "$([[ "${CFG_INSTALL_UNATTENDED_UPGRADES}" == 1 ]] && echo 'on' || echo 'off')" \
        \
        3>&1 1>&2 2>&3)"; # Output collection occurs here.

      CFG_INSTALL_SWAP='0';

      CFG_INSTALL_WS_CA_FILES='0';

      CFG_INSTALL_DOCKER='0';

      CFG_INSTALL_POSTFIX='0';

      CFG_INSTALL_MAILCATCHER='0';

      CFG_INSTALL_NGINX='0';
      CFG_INSTALL_APACHE='0';

      CFG_INSTALL_MYSQL='0';

      CFG_INSTALL_MEMCACHE='0';
      CFG_INSTALL_RAMDISK='0';

      CFG_INSTALL_PHP_CLI='0';
      CFG_INSTALL_PHP_FPM='0';

      CFG_INSTALL_PHPCS='0';
      CFG_INSTALL_PHING='0';
      CFG_INSTALL_PHPUNIT='0';
      CFG_INSTALL_APIGEN='0';
      CFG_INSTALL_CASPERJS='0';
      CFG_INSTALL_COMPOSER='0';
      CFG_INSTALL_WP_CLI='0';
      CFG_INSTALL_WP_I18N_TOOLS='0';

      CFG_INSTALL_APP_REPO='0';

      CFG_INSTALL_DISCOURSE='0';

      CFG_INSTALL_WORDPRESS='0';
      CFG_INSTALL_WORDPRESS_VM_SYMLINKS='0';

      CFG_INSTALL_FIREWALL='0';
      CFG_INSTALL_FAIL2BAN='0';

      CFG_INSTALL_UNATTENDED_UPGRADES='0';

      for _cfg_package_option in $_cfg_package_options; do
        export "${_cfg_package_option}"='1'; done;

      ## Ask if they want to configure additional specifics.

      if dialog \
        --backtitle 'Configuration' \
        --title 'Configure additional details?' \
        --yes-label 'Yes (Configure)' \
        --no-label 'No (Use Defaults)' \
        --no-cancel \
        --yesno '' 5 75; then

          ### Ask for additional specific details.

          for _cfg_key in \
            'CFG_OTHER_HOSTS' \
            \
            'CFG_ADMIN_PREFERRED_SHELL' \
            'CFG_ADMIN_AUTHORIZED_SSH_KEYS' \
            \
            'CFG_TOOLS_USERNAME' \
            'CFG_TOOLS_PASSWORD' \
            'CFG_TOOLS_PMA_BLOWFISH_KEY' \
            \
            'CFG_MAINTENANCE_BYPASS_KEY' \
            \
            'CFG_MYSQL_DB_HOST' \
            'CFG_MYSQL_DB_PORT' \
            'CFG_MYSQL_SSL_ENABLE' \
            'CFG_MYSQL_DB_CHARSET' \
            'CFG_MYSQL_DB_COLLATE' \
            'CFG_MYSQL_DB_NAME' \
            'CFG_MYSQL_DB_USERNAME' \
            'CFG_MYSQL_DB_PASSWORD' \
            \
            'CFG_INSTALL_PHP_VERSION' \
            \
            'CFG_INSTALL_MYSQL_DB_IMPORT_FILE' \
            \
            'CFG_DISCOURSE_SMTP_HOST' \
            'CFG_DISCOURSE_SMTP_PORT' \
            'CFG_DISCOURSE_SMTP_AUTH_TYPE' \
            'CFG_DISCOURSE_SMTP_USERNAME' \
            'CFG_DISCOURSE_SMTP_PASSWORD' \
            \
            'CFG_FIREWALL_ALLOWS_MYSQL_INSIDE_VPN' \
            'CFG_FIREWALL_ALLOWS_CF_ONLY_VIA_80_443' \
            \
            'CFG_CONFIG_FILE' \
            ; do
              fill-cfg-rcs "${_cfg_key}";

              _cfg_value="$(dialog \
                --backtitle 'Configuration' \
                --title 'Additional Details' \
                --no-cancel \
                --inputbox "${_cfg_key}" 10 70 "${!_cfg_key}" \
                3>&1 1>&2 2>&3)";

              export "${_cfg_key}"="${_cfg_value}";
          done;
      fi;

      # Fill, clean, sanitize.

      fill-clean-sanitize-cfgs;

      # Validate config values now.

      if ! validate-cfgs; then
        continue; fi; # Begin again.

      ## Sanitize & print list of all config vars now.

      echo 'Your configuration looks like this:';
      echo '-----------------------------------------';

      for _cfg_key in "${cfgs[@]}"; do
        echo "${_cfg_key}"'='"${!_cfg_key}"; done;

      ## Quick review; ask for confirmation.

      read -rp 'Does this all look right? [y/N] ' _cfg_response;
      _cfg_response="${_cfg_response,,}"; # To lowercase.

      if [[ "${_cfg_response}" =~ ^(yes|y)$ ]]; then
        cfgs_confirmed='1'; fi;

    done;
  fi;

  return 0; # Ready to go!
};

# ----------------------------------------------------------------------------------------------------------------------

cfgs-wizard; unset cfgs; # Run wizard and do housekeeping.
